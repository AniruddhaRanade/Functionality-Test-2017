
Dev_boards_ATmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000ca  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000793  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00000fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "common.h"

int main(void)
{
	// Initializations
	init_UART();
  82:	0e 94 4d 00 	call	0x9a	; 0x9a <init_UART>
	// Variables 
	uint8_t data;
	
    while (1) 
    {
		transmit_UART("d");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmit_UART>
		data=receive_UART();
  8e:	0e 94 5f 00 	call	0xbe	; 0xbe <receive_UART>
		transmit_UART(data);
  92:	99 27       	eor	r25, r25
  94:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmit_UART>
	}
  98:	f6 cf       	rjmp	.-20     	; 0x86 <main+0x4>

0000009a <init_UART>:


void init_UART(void )
{

  UCSRA = 0;
  9a:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
  9c:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
  9e:	10 bc       	out	0x20, r1	; 32
  
  ///Double Baud Rate
  UCSRA |= _BV(U2X);
  a0:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |= _BV(RXEN) | _BV(TXEN);
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	88 61       	ori	r24, 0x18	; 24
  a6:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |= _BV(USBS) | _BV(UCSZ1) | _BV(UCSZ0);
  a8:	80 b5       	in	r24, 0x20	; 32
  aa:	8e 60       	ori	r24, 0x0E	; 14
  ac:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
  b2:	10 bc       	out	0x20, r1	; 32
  b4:	08 95       	ret

000000b6 <transmit_UART>:


void transmit_UART(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <transmit_UART>
  //* Start transmission
  UDR = data;
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	08 95       	ret

000000be <receive_UART>:
}

uint8_t receive_UART(void)
{
  while ((UCSRA & (1 << RXC)) == 0);
  be:	5f 9b       	sbis	0x0b, 7	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <receive_UART>
  return UDR;
  c2:	8c b1       	in	r24, 0x0c	; 12
}
  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
